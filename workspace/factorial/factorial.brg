%{
/* Instruction selection with postfix.h
 */
    
#include <stdio.h>
#include <assert.h>
#include <stdlib.h>
#include <string.h>
#include "node.h"
#include "tabid.h"
#include "postfix.h"
#include "y.tab.h"

#ifndef U_
#define U_ "_"
#endif

#define GLOBAL 0
extern FILE *outfp;
extern int lbl;
extern char *mklbl(int n);
extern char **yynames;

int trash;
static int stk;

static int sameVar(NODEPTR_TYPE p) {
  return strcmp(p->SUB(0)->value.s, p->SUB(1)->SUB(0)->value.s) ? 0x7fff : 2;
}
static int sameLoc(NODEPTR_TYPE p) {
  return p->SUB(0)->value.s == p->SUB(1)->SUB(0)->value.s ? 0x7fff : 2;
}

%}
%term ARG=';'
%include "y.tab.h"
%%

%!ficheiro: PROG(declaracoes)
%!
%!declaracoes: declaracao
%!declaracoes: DECLS(declaracoes, declaracao)
%!
%!declaracao: INIT(id, init)        
%!declaracao: DECL(id)
%!declaracao: DECL(id, BODY)
%!declaracao: DECL(id, corpo)
%!declaracao: DECL(id, NIL)
%!
%!id: IDENTIF { /* globl/X pfDATA/RODATA ALIGN LABEL */}
%!
%!corpop: NIL
%!corpop: corpo
%!
%!ptr: NIL      
%!ptr: PNTR       
%!
%!cons: NIL     
%!cons: CONST   
%!
%!pub: NIL      
%!pub: PUBLIC   
%!
%!tipo: VOID      
%!tipo: INTEGER   
%!tipo: STRING    
%!tipo: NUMBER    
%!
%!init: INT { /* pfINTEGER */ }
%!init: STR { /* char *s = p->value.s; do fprintf(outfp, pfCHAR, (unsigned char)*s); while (*s++ != 0); */ }
%!init: NUM
%!init: IDENTIF {/* pfID */ }
%!
%!parametros: PARAMS(parametros, parametro)
%!parametros: PARAMS(parametro)
%!
%!parametro: IDENTIF
%!
%!pars2:
%!pars2:

corpo: NIL
corpo: instrucoes
corpo: PINTR(pars2, instrucoes)

pars2: PARS2  
pars2: IDENTIF

instrucoes: INSTRS(instrucoes, instrucao)
instrucoes: instrucao

instrucao: LIST(instrucao,instrucao)
instrucao: LABEL                               1 { fprintf(outfp, pfLABEL, p->value.s); }
instrucao: expressao                           1 { fprintf(outfp, pfTRASH, 4); }
instrucao: corpo
instrucao: JMP                                 1 { fprintf(outfp, pfJMP, p->value.s); }
instrucao: JZ(expressao,ETIQ)                  1 { fprintf(outfp, pfJZ, p->SUB(1)->value.s); }
instrucao: JNZ(expressao,ETIQ)                 1 { fprintf(outfp, pfJNZ, p->SUB(1)->value.s); }
instrucao: JZ(LT(expressao,expressao), ETIQ)   1 { fprintf(outfp, pfJGE, p->SUB(1)->value.s); }
instrucao: JZ(LE(expressao,expressao), ETIQ)   1 { fprintf(outfp, pfJGT, p->SUB(1)->value.s); }
instrucao: JZ(GT(expressao,expressao), ETIQ)   1 { fprintf(outfp, pfJLE, p->SUB(1)->value.s); }
instrucao: JZ(GE(expressao,expressao), ETIQ)   1 { fprintf(outfp, pfJLT, p->SUB(1)->value.s); }
instrucao: JZ(EQ(expressao,expressao), ETIQ)   1 { fprintf(outfp, pfJNE, p->SUB(1)->value.s); }
instrucao: JZ(NE(expressao,expressao), ETIQ)   1 { fprintf(outfp, pfJEQ, p->SUB(1)->value.s); }
instrucao: JNZ(LT(expressao,expressao), ETIQ)  1 { fprintf(outfp, pfJLT, p->SUB(1)->value.s); }
instrucao: JNZ(LE(expressao,expressao), ETIQ)  1 { fprintf(outfp, pfJLE, p->SUB(1)->value.s); }
instrucao: JNZ(GT(expressao,expressao), ETIQ)  1 { fprintf(outfp, pfJGT, p->SUB(1)->value.s); }
instrucao: JNZ(GE(expressao,expressao), ETIQ)  1 { fprintf(outfp, pfJGE, p->SUB(1)->value.s); }
instrucao: JNZ(EQ(expressao,expressao), ETIQ)  1 { fprintf(outfp, pfJEQ, p->SUB(1)->value.s); }
instrucao: JNZ(NE(expressao,expressao), ETIQ)  1 { fprintf(outfp, pfJNE, p->SUB(1)->value.s); }


%!updown: UPTO
%!updown: DOWNTO

%! expressoes: EXPS(expressoes, expressao)
%! expressoes: expressao

expressao: INT                            1 { fprintf(outfp, pfIMM, p->value.i); printf("INT: %d\n", p->value.i);}
%!expressao: NUM                            999 { fprintf(outfp, pfIMM, p->value.i); }
expressao: STRN                           3 { int l = ++lbl; char *s = p->value.s;
                                              fprintf(outfp, pfRODATA pfALIGN pfLABEL, mklbl(l));
                                              do fprintf(outfp, pfCHAR, (unsigned char)*s); while (*s++ != 0);
                                              fprintf(outfp, pfTEXT pfADDR, mklbl(l)); }
expressao: lvalue                         1 { fprintf(outfp, pfLOAD); }
expressao: CALL2(IDENTIF, stack)          3 { fprintf(outfp, pfCALL pfTRASH pfPUSH, p->SUB(0)->value.s, stk); printf("CALL2- 2 args\n"); stk = 0;}
expressao: CALL(IDENTIF)                  2 { fprintf(outfp, pfCALL pfPUSH, p->SUB(0)->value.s); printf("CALL\n"); stk = 0;}
expressao: ATRIB(dupexp, lvalue)          1 { fprintf(outfp, pfSTORE /*pfSWAP pfSTORE*/); printf("STORE: %d\n", p->SUB(0)->value.i);}
expressao: UMINUS(expressao)              1 { fprintf(outfp, pfNEG); printf("UMINUS: %d\n", p->SUB(0)->value.i);}
expressao: INC(lvalue, NIL)               1 { fprintf(outfp, pfINCR, 1);}
expressao: DEC(lvalue, NIL)               1 { fprintf(outfp, pfDECR, 1);}
expressao: INC(NIL, lvalue)               1 { fprintf(outfp, pfINCR, 1);}
expressao: DEC(NIL, lvalue)               1 { fprintf(outfp, pfDECR, 1);}
expressao: MUL(expressao, expressao)      1 { fprintf(outfp, pfMUL); } 
expressao: DIV(expressao, expressao)      1 { fprintf(outfp, pfDIV); } 
expressao: MOD(expressao, expressao)      1 { fprintf(outfp, pfMOD); } 
expressao: ADD(expressao, expressao)      1 { fprintf(outfp, pfADD); }
expressao: SUBT(expressao, expressao)     1 { fprintf(outfp, pfSUB); }
expressao: GT(expressao, expressao)       1 { fprintf(outfp, pfGT); } 
expressao: LT(expressao, expressao)       1 { fprintf(outfp, pfLT); } 
expressao: EQ(expressao, expressao)       1 { fprintf(outfp, pfEQ); } 
expressao: NE(expressao, expressao)       1 { fprintf(outfp, pfNE); } 
expressao: GE(expressao, expressao)       1 { fprintf(outfp, pfGE); } 
expressao: LE(expressao, expressao)       1 { fprintf(outfp, pfLE); } 
expressao: AND(expressao, expressao)      7 { char *l = mklbl(++lbl); 
                                             fprintf(outfp, pfSWAP pfDUP pfJZ pfTRASH pfLABEL pfSWAP pfTRASH, l, 4, l, 4); }
expressao: OR(expressao, expressao)       7 { char *l = mklbl(++lbl); 
                                             fprintf(outfp, pfSWAP pfDUP pfJNZ pfTRASH pfLABEL pfSWAP pfTRASH, l, 4, l, 4);  }
expressao: NEG(expressao)                 2 { fprintf(outfp, pfIMM pfEQ, 0);}
expressao: FACT(expressao)
expressao: ADDR(lvalue)                   0 { /* empty */ }
expressao: POINTER(lvalue)                1 { fprintf(outfp, pfLOAD); }


dupexp: expressao                         1 { fprintf(outfp, pfDUP); }

lvalue: IDENTIF   1 { if (p->user == GLOBAL)
                          {fprintf(outfp, pfADDR, p->value.s); printf("GLOBAL - %s\n", p->value.s);}
                        else
                          {fprintf(outfp, pfLOCAL, p->user); printf("LOCAL - %d\n", p->user);}
                    }
lvalue: VECTOR(lvalue2,expressao)  3 {fprintf(outfp, pfIMM pfMUL pfADD, 4);printf("VECTOR - lvalue\n");}

lvalue2: lvalue     1{ fprintf(outfp, pfLOAD); printf("LOAD - lvalue - %d\n", p->user); }

stack:  EXPS(stack,stack)
stack:  expressao { stk += 4; }
stack:  NIL { stk = 0; }

%%

void function(char *name, int enter, Node *body) {
  int i;
  extern int trace;

  if(trace) printNode(body, stdout, yynames);
  if (body == 0 || body->attrib == NIL) /* forward declaration */
    fprintf(outfp, pfEXTRN, name);
  else { /* function body */
    if (strcmp(name, "entry") == 0) // para a funcao entry
      fprintf(outfp, pfTEXT pfALIGN pfGLOBL pfLABEL pfENTER, "_entry", pfFUNC, "_entry", enter);
    else
    fprintf(outfp, pfTEXT pfALIGN pfGLOBL pfLABEL pfENTER, name, pfFUNC, name, enter);
    if (yyselect(body) == 1) yyerror("No match for syntactic tree.");
    fprintf(outfp, pfLEAVE pfRET); /* just in case there is no 'return' */
    //  freeNode(body);
  }
}

/*   contido no function
void program(int enter, Node *body) {
  function("_entry", enter, body);
  fprintf(outfp, pfEXTRN pfEXTRN pfEXTRN pfEXTRN,
  		U_"prints", U_"printi", U_"println", U_"readi");
}*/


/* pfID para o pointer */
void declare(char *name, Node * value) {
  int tipo = IDfind(name, 0);
  if (tipo == 0)
    fprintf(outfp, pfBSS pfALIGN pfLABEL pfBYTE pfTEXT, name, 4);
  else if ((tipo & 0x3) == 1){ //Se for inteiro
    if ((tipo & 0x7) == 5) fprintf(outfp, pfDATA pfALIGN pfLABEL pfID pfTEXT, name, value->value.s);
    else{
    if ((tipo & 0x15) == 9){ //Se for cons
      if ((tipo & 0x31) == 17){ //Se for public
        fprintf(outfp, pfRODATA pfALIGN pfGLOBL pfLABEL pfINTEGER pfTEXT, name, pfINTEGER, name, value->value.i);
      } else
        fprintf(outfp, pfRODATA pfALIGN pfLABEL pfINTEGER pfTEXT, name, value->value.i);
    } else
      fprintf(outfp, pfDATA pfALIGN pfLABEL pfINTEGER pfTEXT, name, value->value.i);
    }
  }
  else if((tipo & 0x3) == 2){
    if ((tipo & 0x15) == 10){ //Se for cons
      if ((tipo & 0x31) == 18){ //Se for public
        fprintf(outfp, pfRODATA pfALIGN pfGLOBL pfLABEL pfSTR pfTEXT, name, pfSTR, name, name, value);
      } else
        fprintf(outfp, pfRODATA pfALIGN pfLABEL pfSTR pfTEXT, name, name, value);
    } else
      fprintf(outfp, pfDATA pfALIGN pfLABEL pfSTR pfTEXT, name, name, value);
  }
  else if((tipo & 0x3) == 3){

  }
}


//fprintf(outfp, pfDATA pfALIGN pfLABEL pfINTEGER pfTEXT, name, value);
