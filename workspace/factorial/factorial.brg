%{
/* Instruction selection with postfix.h
 */
    
#include <stdio.h>
#include <assert.h>
#include <stdlib.h>
#include <string.h>
#include "node.h"
#include "tabid.h"
#include "postfix.h"
#include "y.tab.h"

#ifndef U_
#define U_ "_"
#endif

extern FILE *outfp;
extern int lbl;
extern char *mklbl(int n);
extern char **yynames;

static int stk;
static int sameVar(NODEPTR_TYPE p) {
  return strcmp(p->SUB(0)->value.s, p->SUB(1)->SUB(0)->value.s) ? 0x7fff : 2;
}
static int sameLoc(NODEPTR_TYPE p) {
  return p->SUB(0)->value.s == p->SUB(1)->SUB(0)->value.s ? 0x7fff : 2;
}

%}
%include "y.tab.h"
%%
%%

void function(char *name, int enter, Node *body) {
  int i;
  extern int trace;

  if(trace) printNode(body, stdout, yynames);
  if (body == 0) /* forward declaration */
    fprintf(outfp, pfEXTRN, name);
  else { /* function body */
    fprintf(outfp, pfTEXT pfALIGN pfGLOBL pfLABEL pfENTER, name, pfFUNC, name, enter);
    if (yyselect(body) == 1) yyerror("No match for syntactic tree.");
    fprintf(outfp, pfLEAVE pfRET); /* just in case there is no 'return' */
    freeNode(body);
  }
}

void program(int enter, Node *body) {
  function("_main", enter, body);
  fprintf(outfp, pfEXTRN pfEXTRN pfEXTRN pfEXTRN,
  		U_"prints", U_"printi", U_"println", U_"readi");
}

void declare(char *name, int value) {
  IDnew(INTEGER, name, 0);
  if (value == 0)
    fprintf(outfp, pfBSS pfALIGN pfLABEL pfBYTE pfTEXT, name, 4);
  else
    fprintf(outfp, pfDATA pfALIGN pfLABEL pfINTEGER pfTEXT, name, value);
}
